<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
          http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

       <!-- 加载资源文件 -->
       <context:property-placeholder location="classpath:resources.properties"/>

       <!-- 扫描注解Bean -->
       <context:component-scan base-package="com.hiabby.web.**.service">
              <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
       </context:component-scan>
       <!-- 开启AOP监听 只对当前配置文件有效 -->
       <aop:aspectj-autoproxy expose-proxy="true"/>

       <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
              <!-- 基本属性 url、user、password -->
              <property name="url" value="jdbc:mysql://localhost:3306/hiabby?useSSL=false&amp;autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;serverTimezone=GMT"/>
              <property name="username" value="hiabby_dba"/>
              <property name="password" value="hiabby_dba"/>

              <!-- 配置初始化大小、最小、最大 -->
              <property name="initialSize" value="${druid.initialSize}"/>
              <property name="minIdle" value="${druid.minIdle}"/>
              <property name="maxActive" value="${druid.maxActive}"/>

              <!-- 配置获取连接等待超时的时间 -->
              <property name="maxWait" value="${druid.maxWait}"/>
              <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
              <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />

              <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
              <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />

              <property name="validationQuery" value="${druid.validationQuery}" />
              <property name="testWhileIdle" value="${druid.testWhileIdle}" />
              <property name="testOnBorrow" value="${druid.testOnBorrow}" />
              <property name="testOnReturn" value="${druid.testOnReturn}" />

              <!-- 打开PSCache，并且指定每个连接上PSCache的大小  如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。-->
              <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
              <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />

              <!-- 配置监控统计拦截的filters -->
              <property name="filters" value="${druid.filters}" />
              <property name="proxyFilters">
                     <list>
                            <ref bean="log-filter"/>
                     </list>
              </property>

       </bean>

       <!-- 自定义log输出 -->
       <bean id="log-filter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
              <property name="resultSetLogEnabled" value="false"/>
              <property name="statementExecutableSqlLogEnable" value="true"/>
              <property name="statementCloseAfterLogEnabled" value="false"/>
              <property name="statementCreateAfterLogEnabled" value="false"/>
              <property name="statementParameterClearLogEnable" value="false"/>
              <property name="statementParameterSetLogEnabled" value="false"/>
              <property name="statementExecuteAfterLogEnabled" value="false"/>
              <property name="statementPrepareAfterLogEnabled" value="false"/>
              <property name="statementExecuteBatchAfterLogEnabled" value="false"/>
              <property name="statementExecuteQueryAfterLogEnabled" value="false"/>
              <property name="statementExecuteUpdateAfterLogEnabled" value="false"/>
              <property name="statementPrepareCallAfterLogEnabled" value="false"/>
       </bean>

       <!-- MyBatis配置 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
              <property name="dataSource" ref="dataSource"/>
              <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
              <property name="typeAliasesPackage" value="com.hiabby.web.**.entity"/>
              <!-- 显式指定Mapper文件位置 -->
              <property name="mapperLocations" value="classpath:/mybatis/**/*Mapper.xml"/>

              <property name="plugins">
                     <array>
                            <bean class="com.github.pagehelper.PageHelper">
                                   <property name="properties">
                                          <value>
                                                 dialect=mysql
                                                 reasonable=true
                                          </value>
                                   </property>
                            </bean>
                            <bean class="com.github.abel533.mapperhelper.MapperInterceptor">
                                   <property name="properties">
                                          <value>
                                                 mappers=com.github.abel533.mapper.Mapper
                                                 IDENTITY=MYSQL
                                                 notEmpty=true
                                                 IDENTITY=CALL uuid32()
                                                 UUID=@java.util.UUID@randomUUID().toString().replace("-","")
                                          </value>
                                   </property>
                            </bean>
                     </array>
              </property>

       </bean>

       <!-- 扫描basePackage下所有接口，扫描注入repository -->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
              <property name="basePackage" value="com.github.abel533.entity.mapper,com.hiabby.web.**.repository"/>
              <!-- <property name="annotationClass" value="org.springframework.stereotype.Repository"/>-->
       </bean>

       <bean id="entityMapper" class="com.github.abel533.entity.EntityMapper" scope="prototype">
              <constructor-arg ref="commonMapper"/>
       </bean>

       <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
              <constructor-arg index="0" ref="sqlSessionFactory"/>
       </bean>

       <bean id="sqlMapper" class="com.github.abel533.sql.SqlMapper" scope="prototype">
              <constructor-arg ref="sqlSession"/>
       </bean>

       <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

       <!-- 事务管理器, Jdbc单数据源事务 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
              <property name="dataSource" ref="dataSource"/>
       </bean>

       <tx:advice id="txAdvice" transaction-manager="transactionManager">
              <tx:attributes>
                     <tx:method name="get*" propagation="REQUIRED" read-only="true"/>
                     <tx:method name="count*" propagation="REQUIRED" read-only="true"/>
                     <tx:method name="find*" propagation="REQUIRED" read-only="true"/>
                     <tx:method name="list*" propagation="REQUIRED" read-only="true"/>
                     <tx:method name="query*" propagation="REQUIRED" read-only="true"/>
                     <tx:method name="select*" propagation="REQUIRED" read-only="true"/>
                     <tx:method name="*" propagation="REQUIRED"/>
              </tx:attributes>
       </tx:advice>

       <aop:config expose-proxy="true" proxy-target-class="true">
              <!-- 只对业务逻辑层实施事务 -->
              <aop:pointcut id="txPointcut" expression="execution(* com.hiabby.web..service..*+.*(..))"/>
              <aop:advisor id="txAdvisor" advice-ref="txAdvice" pointcut-ref="txPointcut"/>
       </aop:config>


</beans>